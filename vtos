#!/usr/bin/perl
################################################################################
# Copyright (c) 2022 Glenn Ramalho
################################################################################
# File: vtos
# Author: Glenn Ramalho
################################################################################
# Description: This script converts a Structural verilog netlist into a spice
#   or spectre netlist.
################################################################################
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

$progname=$0;
$progname=~s#.*/##;
$version = '$Id$' . "\n";
$usage=
"usage: $progname [-hV]
       $progname [-dSE] [-G globals] -i netlist.v[.gz] -o out.net \
          [-s shellfile] [models ...]
";
$help="
This program converts a structural Verilog netlist into a Spice or Spectre
netlist.

-h     help
-V     Version
-d     debug
-G     Connect globals to nets: '-G VDD,VSS'
-i     netlist input, cam be compressed.
-o     output converted file, can't be the same as the input
-S     Use spice format. Default is spectre format.
-s     generate spectre/spice shell wrapper.
         .scs,.spectre = spectre
         others = spice
models models to extract the pin order of library cells, according to the ending
         .scs,.spectre = spectre model
         others = spice models
";

use Getopt::Std;
getopts('hVdG:Si:o:s:') || die $usage . "\n";

if ($opt_h) {
   printf $usage;
   printf $help;
   exit 0;
}
if ($opt_V) {
   printf $version;
   exit 0;
}
if (!$opt_i || !$opt_o) {
   warn "$progname: the -i and -o options are necessary.\n";
   die $usage . "\n";
}
if ($opt_i eq $opt_o) {
   warn "$progname: the -i and -o must not be the same.\n";
   die $usage . "\n";
}

###################
# Sub nl
# inputs: line to clean
# outputs: returns the processed line
# globals: none
#
# Takes a verilog netlist line and strips comments, configuration and white
# spaces. Also adds space before and after the parenthesis or equalsigns to
# make it easier to parse.
#
sub nl {
  local ($nl) = @_;
  chomp $nl;
  $nl =~ s/\(\*.*\*\)//;
  $nl =~ s#//.*##;
  $nl =~ s/^[  ]+//;
  $nl =~ s/[  ]$//;
  $nl =~ s/\(/ ( /;
  $nl =~ s/\)/ ) /;
  $nl =~ s/=/ = /;

  $nl;
}

###################
# sub patchout
# inputs: line to patch
# outputs: patched line
#
# patches a line with some simple rules
#
sub patchout {
   local($l) = @_;
   if (${opt_S}) {
      # Spice cannot have any operator in a signal name
      $l =~ s/</__/g;
      $l =~ s/>/__/g;
      $l =~ s/\[/__/g;
      $l =~ s/\]/__/g;
      $l =~ s/-/m/g;
   } else {
      # Spectre is ok with operators as long as you backslash them
      $l =~ s/</\\</g;
      $l =~ s/>/\\>/g;
      $l =~ s/\[/\\</g;
      $l =~ s/\]/\\>/g;
      $l =~ s/-/\\-/g;
   }

   $l;
}
   
###################
# Sub fmt
# inputs: precontinuationchar, postcontinuationchar, line to print
# outputs: none
# globals: OUT, $opt_S
#
# Prints a line reformatting it to fit in 78 columns. It will break the line.
# It also elimitates illegal characters in the process.
#
sub fmt {
   local ($pc, $ec, @w) = @_;
   local ($i, $len, $line, $word);

   $word = patchout($w[0]);
   $line = $word;
   $len = length($word);
   foreach $_ (@w[1..$#w]) {
      $word = patchout($_);
      if ($len + length($word) + 1 > 78) {
         # The continuation character depends on the output format.
         print OUT $line, (($ec eq "")?"\n":" $ec\n");
         # Then, the next line will get the precontinuation char, if any.
         $line = (($pc eq "")?"   ":"$pc  ") . $word;
         $len = length($line);
      } else {
         $line = $line . " $word";
         $len = $len + length($word) + 1;
      }
   }
   print OUT $line, "\n";
}

###################
# Sub printheader
# inputs: module name and pin list
# outputs: returns the ports with bus limits.
# globals: OUT, $opt_S, %left and %right
#
# Takes a verilog netlist line and strips comments, configuration and white
# spaces. Also adds space before and after the parenthesis or equalsigns to
# make it easier to parse.
#
sub printheader {
   local($module, @pins) = @_;
   local(@epins, $i, $pin, $pinlist);

   @epins = ();
   for($i = 0; $i <= $#pins; $i = $i + 1) {
      $pin = $pins[$i];
      if (! defined $left{$module}{$pin}) {
         push @epins, $pin;
      } elsif ($left{$module}{$pin} == $right{$module}{$pin}) {
         push @epins, "$pin<$left{$module}{$pin}>";
      } else {
         $pinlist = expbusses($pin .
            "[$left{$module}{$pin}:$right{$module}{$pin}]");
         push @epins, split / *, */, $pinlist;
      }
   }

   print OUT "\n";
   if ($opt_S) {
      fmt "+", "", ".subckt", $module, @epins;
   } else {
      fmt "", "\\", "subckt", $module, @epins;
   }
   @epins;
}

###################
# Sub expbusses
# inputs: line with busses to expand
# outputs: expanded line
# globals: none
#
# Finds verilog bus vectors with [] and expands them into individual bits.
# V[5:3] becomes V[5], V[4], V[3]
#
sub expbusses {
   local ($line) = @_;
   local ($bus, $fullbus, @explist, $p, $l, $bit);

   while($line =~ m/([^ \t,()]+)\s*\[([\d-]+):([\d-]+)\]/) {
      # We now collect the data in the bus and located the string.
      $bus = $1;
      $left = $2;
      $right = $3;
      $fullbus = $&;
      $p = index $line, $&;
      $l = length $fullbus;

      # Now we build a list of expanded entries.
      @explist = ();
      for ($bit = $left; $bit >= $right; $bit = $bit - 1) {
         push @explist, "$bus<$bit>";
      }

      # We join it into a comma separated strings and insert it back into
      # the string.
      $expbus = join ", ", @explist;
      substr($line, $p, $l, $expbus);
   }

   $line;
}

###################
# Sub exppins
# inputs: line with pins to expand
# outputs: expanded line
# globals: $opt_d, OUT, %left and %right
#
# Replaces pin connections in the format .pin ( { a, b, c} ) with .pin<2>(a),
# .pin<1>(b), .pin<0>(c).
#
sub exppins {
   local($module,$line) = @_;
   local($bus, $p, $pin, $l, @bus, $i, @flatbus, $newnet);

   while($line =~ m/\.([^ \t,()]+)\s*\(([^()]*,[^()]*)\)/
         || $line =~ m/\.([^ \t,()]+)\s*\(\s*\{[^()]*\}\s*\)/) {
      print OUT "   * Expanding pin $&\n" if $opt_d;
      # First we locate the string in the $_.
      $fullbus = $&;
      $pin = $1;
      $bus = $2;
      $p = index $line, $fullbus; 
      $l = length $fullbus;

      # Now we remove the concatenation brackets and extract the bus elements
      $bus =~ s/{//;
      $bus =~ s/}//;
      $bus =~ s/^\s+//;
      $bus =~ s/\s+$//;
      @bus = split /[ \t]*,[ \t]*/, $bus;

      # Now we find the left for the pin.
      if (! defined $left{$module}{$pin} ) {
         $left = $#bus;
         print OUT "  * Using guess ($pin) left = $left\n" if $opt_d;
      } else {
         $left = $left{$module}{$pin};
         print OUT "  * Using $pin left = $left\n" if $opt_d;
      }

      # We now make a new pin for each entry.
      @flatbus = ();
      for ($i = 0; $i <= $#bus; $i = $i + 1) {
         push @flatbus, ".$pin<" . ($left - $i) . "> (" . $bus[$i] . ")";
      }

      # Now we bring in the flatten bus in.
      $newnet = join ", ", @flatbus;
      print OUT "   * Expanded to $newnet\n" if $opt_d;
      substr $line, $p, $l, $newnet;
   }

   $line;
}

################################################################################
# We first open the netlist. If the file ends in .gz it must be gzipped. We
# unzip it and read it then.
if ($opt_i =~ m/\.gz$/) {
   open (NET, "gunzip -c $opt_i|") || die "$progname: $opt_i: $!\n";
} else {
   open (NET, $opt_i) || die "$progname: $opt_i: $!\n";
}

# Now we open the output file.
open OUT, ">$opt_o" || die "$progname: open $opt_o: $!\n";

# We read any models that may be on the end.
for $model (@ARGV) {
   open (FILE, "$model") || die "$progname: $model: $!\n";

   if ($model =~ /\.scs/i || $model =~ /\.spectre/i) {
      print "* Reading the spectre model $model\n";

      while(<FILE>) {
         s/[;*].*//;
         s/^\s+//;
         s/\s+$//;
         next if m/^$/;

         # Lines that end in backslash need to be continuied
         while ($_ =~ s/\\$/ / && ! eof(FILE) ) {
            $_ = nl($_ . <FILE>);
         }

         # And now we can procss the line
         @_ = split /[, \t]+/;

         if (lc($_[0]) eq "subckt") {
            $subckt = $_[1];
            @{$pins{$subckt}} = @_[2..$#_];
            if ($opt_d) {
               fmt "*", "", "* Found SUBCKT", $_[1], "with pins:",
                  @{$pins{$subckt}};
            }
         }
      }
   } else {
      print "* Reading the spice model $model\n";

      $last = "";
      while($_ = <FILE> || $last ne "") {
         # For any line we wipe out comments and whitespace.
         s/[;*].*//;
         s/^\s+//;
         s/\s+$//;

         # If we find a + in the current line, we attach this line to the
         # end of the previous line.
         if (s/^\s*\+/ /) {
            $last = $last . $_;
            next;
         }

         # Now we split $last to process it. Once we are done, we blank out
         # the $last to keep from processing it twice.
         @_ = split /[, \t]+/, $last;
         $last = $_;

         if (lc($_[0]) eq ".subckt") {
            $subckt = $_[1];
            @{$pins{$subckt}} = @_[2..$#_];
            if ($opt_d) {
               fmt "*", "", "* Found SUBCKT", $_[1], "with pins:",
                  @{$pins{$subckt}};
            }
         }
      }
   }

   close FILE;
}

# The globals, if any, are in opt_G.
if ($opt_G) {
   @globals = split /[ \t]*,[ \t]*/, $opt_G;
   foreach $g (@globals) {
      $globals{$g} = 1;
   }
   print "* Using globals ", join(", ", @globals), "\n";
   print OUT "* Using globals ", join(", ", @globals), "\n";
}

# We now build a header
print OUT <<EOF;
* File: $opt_o
* Extracted from: $opt_i
* Generator: $progname

EOF

# And we are ready to process the netlist.
print "* Reading netlist $opt_i\n";
$unc = 0;
$short = 0;
$modstarted = 0;
$module = "";
while(<NET>) {
   # Remove whitespace
   $_ = nl($_);
   next if m/^$/;
   next if m/`ifn?def/;
   next if m/`include/;
   next if m/`else/;
   next if m/`endif/;

   # When we find the endmodule we close the subckt.
   if (/endmodule/) {
      # If we have not started yet the module, this must have been an empty
      # module. We then handle the header now.
      if ($modstarted) {
         @{$pins{$module}} = printheader($module, @pins);
         $modstarted = 0;
      }

      # And we close off the module.
      if ($opt_S) {
         print OUT ".ends $module\n";
      } else {
         print OUT "ends $module\n";
      }
      $lastmodule = $module;
      $module = ""; 
      next;
   }

   # If a line does not end in a semicolon, we merge it with the next line.
   # We need to stop if we hit the end of file.
   while ($_ !~ /;$/ && ! eof(NET) ) {
      $_ = nl($_ . <NET>);
   }

   # We no longer need the semicolon.
   s/\s*;$//;

   # Once we hit here we can split the line.
   @_ = split /[, \t]+/;

   # Any line with a pin or wire keyword we capture to know if it is a bus
   if ($_[0] eq "input" || $_[0] eq "output" || $_[0] eq "inout" ||
         $_[0] eq "wire") {
      if ($_[1] =~ /\[(.*):(.*)\]/) {
         $start = 2;
         $left = $1;
         $right = $2;
      } elsif ($_[1] =~ /\[(.*)\]/) {
         $start = 2;
         $left = $1;
         $right = $1;
      } else {
         $start = 1;
         $left = "";
         $right = "";
      }

      # We also store the port directions for the wrapper.
      if ($_[0] eq "input") {
         push @{$input{$module}}, @_[$start..$#_];
      } elsif ($_[0] eq "output") {
         push @{$output{$module}}, @_[$start..$#_];
      } elsif ($_[0] eq "inout") {
         push @{$inout{$module}}, @_[$start..$#_];
      }

      if ($left ne "") {
         for $pin (@_[$start..$#_]) {
            if ($opt_d && $_[0] eq "wire") {
               print OUT "* Found wire bus $module.$pin -> $left:$right\n";
            } elsif ($opt_d) {
               print OUT "* Found pin bus $module.$pin -> $left:$right\n";
            }
            $left{$module}{$pin} = $left;
            $right{$module}{$pin} = $right;
         }
      }
      next;
   }

   # We have no special treatment for the supplies. We also can ditch the wires.
   if ($_[0] eq "supply0" || $_[0] eq "supply1" || $_[0] eq "wire") {
      next;
   }

   # If it is a module we need the module name
   if ($_[0] eq "module") {
      # We get the module and the pins
      $module = $_[1];
      @pins = @_[3..$#_-1];
      print "* module $module\n";
      if ($opt_d) {
         fmt "*", "", "* Found module $module has pins", @pins;
      }

      # And we tag that we are doing a new module.
      $modstarted = 1;

   # If we see an instance, we build an instance block. It is quite similar
   # to the verilog one, just the arguments change a bit.
   } else {
      # If this is the first line after the pins, we need to expand any busses
      # in the pinlist first.
      if ($modstarted) {
         @{$pins{$module}} = printheader($module, @pins);
         $modstarted = 0;
      }

      $block = $_[0];
      $inst = $_[1];

      # We first collect the busses.
      $oldline = $_;
      @pins = m/\.[^ \t,()]+\s*\([^()]+\)/g;
      for $pin (@pins) {
         # We mark it
         $pin =~ m/(.*)\((.*)\)/;
         $pinname = $1;
         $pinbus = $2;
         $p = index $_, $pin;
         $l = length $pin;
         
         # We remove any concatenation keys
         $pinbus =~ s/{//g;
         $pinbus =~ s/}//g;
         $pinbus =~ s/^\s+//g;
         $pinbus =~ s/\s+$//g;

         # We now scan it looking for unexpanded busses.
         @bus = split /[ \t]*,[ \t]*/, $pinbus;
         @bits = ();
         for $bit (@bus) {
            # Every element is checked in the module to see if it is missing
            # the bus indexes. We then go through the wires, inputs, outputs
            # and so on in this module.
            if (!defined $left{$module}{$bit}) {
               push @bits, $bit;
            } elsif (defined $left{$module}{$bit} &&
                  $left{$module}{$bit} == $right{$module}{$bit}) {
               push @bits, $bit . "<" . $left{$module}{$bit} . ">";
            } else {
               $bitlist = expbusses($bit .
                  "[$left{$module}{$bit}:$right{$module}{$bit}]");
               push @bits, split /,/, $bitlist;
            }
         }
         
         # And we bring the new list in
         $newline = "$pinname(" . join(", ",@bits) . ")";
         substr $_, $p, $l, $newline;
      }

      # We need to expand any explicit busses.
      $_ = expbusses($_);

      # Now we look for .pin(a, b, c) and replace it with .pin<2>(a),
      # .pin<1>(b), .pin<0>(c).
      $_ = exppins($block,$_);

      if ($oldline ne $_ && $opt_d) {
         fmt "*", "", "* was:", split(/[ \t]+/, $oldline);
         fmt "*", "", "* now:", split(/[ \t]+/, $_);
      }

      # If we have any assigns, they need to be replaced with a small resistor
      # as neither Spice nor Spectre do not allow shorts.
      if ($block eq "assign") {
         # The sides might have been expanded, so we first look for the equal
         # sine.
         @_ = split /[, \t]+/;
         $i = 0;
         do {
            $i = $i + 1;
         } while ($_[$i] ne "=" && $i <= $#_);
         
         # We now check it. We must have the equals and there should be an
         # equal number of arguments on either side.
         if ($i > $#_ || $i == 1 || $i-1 != $#_-$i) {
            print OUT "* Garbled $_ $i $#_ \n";
         } else {
            for ($n = 1; $n < $i; $n = $n + 1) {
               if ($opt_S) {
                  fmt "+", "", "Rshort_$short", $_[$n], $_[$n+$i], "1";
               } else {
                  fmt "", "\\", "Rshort_$short", $_[$n], $_[$n+$i], "resistor",
                     "r=1";
               }
               $short = $short + 1;
            }
         }

         next;
      }

      # If the device has no pins, it can't be too complex, it must be missing.
      # So we just print a warning and skip it.
      if (! defined $pins{$block}) {
         print OUT "* block $block inst $inst not found\n";
         next;
      }

      # We need to rearrange the pins into the order that they are in the
      # device.
      @pins = ();
      foreach $pin (@{$pins{$block}}) {
         # Single bit inputs do not need to have the bus mentioned.
         $nobus = $pin;
         $nobus =~ s/<[\d-]+>//;
         # For every pin we find, we need to know where it is located in the
         # instance as Spice does not support connect-by-name.
         if ($_ =~ m/\.$pin\s*\(([^()]*)\)/) {
            $net = $1;
            $net =~ s/^\s+//;
            $net =~ s/\s+$//;
            # pins connected to void we leave unconnected
            if ($net eq "") {
               $net = "UNCON_$unc";
               $unc = $unc + 1;
            }
         } elsif ($_ =~ m/\.$nobus\s*\(([^()]*)\)/) {
            $net = $1;
            $net =~ s/^\s+//;
            $net =~ s/\s+$//;
            # pins connected to void we leave unconnected
            if ($net eq "") {
               $net = "UNCON_$unc";
               $unc = $unc + 1;
            }
         } elsif (defined $globals{$pin}) {
            $net = $pin;
         } else {
            $net = "UNCON_$unc";
            $unc = $unc + 1;
         }
         push @pins, $net;
         print OUT "* Connected Pin $pin<$block> to net $net\n" if $opt_d;
      }
      
      # And we can generate the instance. Note that in spice format all
      # subcircuits must begin with an X.
      if ($opt_S) {
         fmt "+", "", "X" . $inst, @pins, $block;
      } else {
         fmt "", "\\", $inst, "(", @pins, ")", $block;
      }
   }
}

close NET if $opt_i ne '-';
close OUT if $opt_o ne '-';

# We now generate the shell using the last module in the list.
sub wrappin {
   local($spectre, $pin, $out) = @_;

   if ($spectre && $out) {
      fmt "", "\\", "C$pin", "(", $pin, "0", ")", "capacitor", "c=1p";
   } elsif ($spectre) {
      fmt "", "\\", "R$pin", "(", $pin, "0", ")", "resistor", "r=1k";
   } elsif ($out) {
      fmt "+", "", "C$pin", $pin, "0", "1p";
   } else {
      fmt "+", "", "R$pin", $pin, "0", "1k";
   }
}

sub dopin {
   local($spectre, $pin, $module, $out) = @_;
   local($i);

   if (! defined $left{$module}{$pin}) {
      wrappin($spectre, $pin, $out);
      return;
   }

   for ($i = $left{$module}{$pin}; $i >= $right{$module}{$pin}; $i = $i - 1){
      wrappin($spectre, "$pin<$i>", $out);
   }
}

if ($opt_s) {
   printf "* Generating Wrapper\n";
   open OUT, ">$opt_s" || die "$progname: open $opt_s: $!\n";
print OUT <<EOF;
* File: $opt_s
* Shell for $lastmodule
* Extracted from: $opt_i
* Generator: $progname

EOF
   if ($opt_s =~ /\.scs/ || $opt_s =~ /\.spectre/) {
      fmt "", "\\", "i_$lastmodule", "(", @{$pins{$lastmodule}}, ")",
         $lastmodule;
      print OUT "\n";
      for $pin (@{$input{$lastmodule}}) { dopin(1, $pin, $lastmodule, 0); }
      for $pin (@{$output{$lastmodule}}) { dopin(1, $pin, $lastmodule, 1); }
      for $pin (@{$inout{$lastmodule}}) { dopin(1, $pin, $lastmodule, 1); }
   } else {
      fmt "+", "", "Xi_" . $lastmodule, @{$pins{$lastmodule}}, $lastmodule;
      print OUT "\n";
      for $pin (@{$input{$lastmodule}}) { dopin(0, $pin, $lastmodule, 0); }
      for $pin (@{$output{$lastmodule}}) { dopin(0, $pin, $lastmodule, 1); }
      for $pin (@{$inout{$lastmodule}}) { dopin(0, $pin, $lastmodule, 1); }
      print OUT "\n\n.end\n";
   }
   close OUT;
}

exit 0;
